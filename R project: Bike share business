---
title: "BIKESHARE.PROJECT"
author: "JEAN YVENS ALBERUS"
date: '2023-02-23'
output:
  word_document: default
  html_document: default
  pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# installing required packages

install.packages("tidyverse")
install.packages("lubridate")
install.packages("ggplot")


#loading the packages

```{r}
library(tidyverse)
library(lubridate)
library(ggplot2)
```



#setting working environment
```{r}
getwd()

setwd("C:/Users/Jean Yvens Alberus/Desktop/Caspstone_BikeshareProject/CSV_Bikeshare_data")
```



#loadind the data (first half of 2022)


```{r}
jan_data <- read_csv("202201_divvy_tripdata.csv")

feb_data <-read_csv("202202_divvy_tripdata.csv")

mar_data <- read_csv("202203_divvy_tripdata.csv")

apr_data <- read_csv("202204_divvy_tripdata.csv")

may_data <- read_csv("202205_divvy_tripdata.csv")
jun_data <- read_csv("202206_divvy_tripdata.csv")
```

# DATA CLEANING AND TRANSFORMATION 


#checking colnames before we merge the data
```{r}

colnames(jan_data)
colnames(feb_data)
colnames(mar_data)
colnames(apr_data)
colnames(may_data)
colnames(jun_data)
```


##renaming columns not necessary cause they are already identical



# Inspect the dataframes and look for incongruencies

str(jan_data)
str(feb_data)
str(mar_data)
str(apr_data)
str(may_data)
str(jun_data)}




# Convert ride_id and rideable_type to character so that they can stack correctly
```{r}
jan_data <-  mutate(jan_data, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type)) 
feb_data <-  mutate(feb_data, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type)) 
mar_data <-  mutate(mar_data, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type)) 
apr_data<-  mutate(apr_data, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
may_data <-  mutate(may_data, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type)) 
jun_data <-  mutate(may_data, ride_id = as.character(ride_id)
                    ,rideable_type = as.character(rideable_type)) 
```



# Stacking individual month data frames into one big data frame 
```{r}
all_trips <- bind_rows(jan_data, feb_data, mar_data, apr_data, may_data, jun_data)

head(all_trips)

directory <- getwd()

colnames(all_trips)  #List of column names

dim(all_trips)  #Dimensions of the data frame?
head(all_trips)  #See the first 6 rows of data frame.  Also 
tail(all_trips)

str(all_trips)  #See list of columns and data types (numeric, character, etc)

summary(all_trips)  #Statistical summary of data. Mainly for numerics
```



# We will want to add a calculated field for length of ride since the raw data did not have the "tripduration" column. We will add "ride_length" to the entire dataframe for consistency.

## if There are some rides where tripduration shows up as negative, including several hundred rides where Divvy took bikes out of circulation for Quality Control reasons. We will want to delete these rides.
```{r}
table(all_trips$member_casual)
```



# Reassign to the desired values (we will go with the current 2020 labels)
```{r}
all_trips <-  all_trips %>% 
  mutate(member_casual = recode(member_casual
                                ,"Subscriber" = "member"
                                ,"Customer" = "casual"))

table(all_trips$member_casual)

all_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd

all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")
```



# Adding a "ride_length" calculation to all_trips

```{r}
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)

```


# Remove "bad" data

## The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative

```{r}
all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]

```




# CONDUCT DESCRIPTIVE ANALYSIS
##=====================================

# Descriptive analysis on ride_length (all figures in seconds)
```{r}
mean(all_trips_v2$ride_length) #straight average (total ride length / rides)

median(all_trips_v2$ride_length)

max(all_trips_v2$ride_length) #longest ride
min(all_trips_v2$ride_length) #shortest ride


summary(all_trips_v2$ride_length)

```


# Compare members and casual users
```{r}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)


```


# See the average ride time by each day for members vs casual users
```{r}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
# Notice that the days of the week are out of order. Let's fix that.
#all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, 
#            levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
```


# Now, let's run the average ride time by each day for members vs casual users
##aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)



# Analyze ridership data by type and weekday
```{r}
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(member_casual, weekday) %>%  #groups by usertype and weekday
  summarise(number_of_rides = n()							#calculates the number of rides and average duration 
            ,average_duration = mean(ride_length)) %>% 		# calculates the average duration
  arrange(member_casual, weekday)								# sorts

```

#DATA VIZ

# Let's visualize the number of rides by rider type
```{r}
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")
```

##getting the work environment
```{r}
getwd()
```


# Let's create a visualization for average duration
```{r}
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge")
```



# EXPORTING SUMMARY FILE FOR FURTHER ANALYSIS

```{r}
#counts <- aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

```
#code to export the file avg_ride_length.csv
write.csv(counts, file = "C:/Users/Jean Yvens Alberus/Desktop/Caspstone_BikeshareProject/CSV_Bikeshare_data\\avg_ride_length.csv", row.names= TRUE)
```{r}
write.csv(all_trips_v2, file= "alltrip_bikeshare.csv")
